import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

class solve {
    public static ArrayList<ArrayList<Integer>> AllSubsets(int arr[], int n) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        HashSet<ArrayList<Integer>> set = new HashSet<>();
        ArrayList<Integer> subset = new ArrayList<>();
        Arrays.sort(arr);
        generateSubsets(arr, n, 0, subset, set);
        result.addAll(set);
        result.sort((a, b) -> {
            int size = Math.min(a.size(), b.size());
            for (int i = 0; i < size; i++) {
                if (!a.get(i).equals(b.get(i))) {
                    return a.get(i) - b.get(i);
                }
            }
            return a.size() - b.size();
        });
        return result;
    }

    private static void generateSubsets(int[] arr, int n, int index, ArrayList<Integer> subset, HashSet<ArrayList<Integer>> set) {
        if (index == n) {
            set.add(new ArrayList<>(subset));
            return;
        }
        subset.add(arr[index]);
        generateSubsets(arr, n, index + 1, subset, set);
        subset.remove(subset.size() - 1);
        generateSubsets(arr, n, index + 1, subset, set);
    }
}
