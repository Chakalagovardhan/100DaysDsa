class Solution {

    // Function to solve the Sudoku puzzle using backtracking
    static boolean SolveSudoku(int grid[][]) {
        int row = -1, col = -1;
        boolean isEmpty = false;

        // Find an empty cell (denoted by 0)
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (grid[i][j] == 0) {
                    row = i;
                    col = j;
                    isEmpty = true;
                    break;
                }
            }
            if (isEmpty) {
                break;
            }
        }

        // If there is no empty cell, the Sudoku is solved
        if (!isEmpty) {
            return true;
        }

        // Try placing numbers 1 to 9 in the empty cell
        for (int num = 1; num <= 9; num++) {
            if (isSafe(grid, row, col, num)) {
                grid[row][col] = num;  // Place the number

                // Recur to solve the rest of the grid
                if (SolveSudoku(grid)) {
                    return true;
                }

                // If the number doesn't lead to a solution, reset it (backtrack)
                grid[row][col] = 0;
            }
        }

        // If no number can be placed, return false (trigger backtracking)
        return false;
    }

    // Function to check if placing a number is valid (safe)
    static boolean isSafe(int[][] grid, int row, int col, int num) {
        // Check the row and column
        for (int x = 0; x < 9; x++) {
            if (grid[row][x] == num || grid[x][col] == num) {
                return false;
            }
        }

        // Check the 3x3 sub-grid
        int startRow = row - row % 3, startCol = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (grid[i + startRow][j + startCol] == num) {
                    return false;
                }
            }
        }

        return true;  // It is safe to place the number
    }

    // Function to print the Sudoku grid
    static void printGrid(int grid[][]) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(grid[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int[][] grid = {
            {5, 3, 0, 0, 7, 0, 0, 0, 0},
            {6, 0, 0, 1, 9, 5, 0, 0, 0},
            {0, 9, 8, 0, 0, 0, 0, 6, 0},
            {8, 0, 0, 0, 6, 0, 0, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {0, 0, 0, 4, 1, 9, 0, 0, 5},
            {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };

        if (SolveSudoku(grid)) {
            printGrid(grid);  // Print the solved Sudoku grid
        } else {
            System.out.println("No solution exists");
        }
    }
}
