class RatInMaze 
{
    
    public static void solve(int[][] maze, int N)
    {
        int[][] sol = new int[N][N];
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++) sol[i][j] = 0;
        
      
        if (!solveMazeUtil(maze, 0, 0, sol, N))
            System.out.println("-1");
            
       
        else 
            new GFG().print(N, sol);
    }

    public static boolean solveMazeUtil(int[][] a,int x,int y,int[][] sol,int N) 
    {
    
        if (x == N - 1 && y == N - 1 && a[x][y] >= 0) 
        {
     
            sol[x][y] = 1;
            return true;
        }

        if (isSafe(a, x, y, N))
        {
           
            sol[x][y] = 1;

           
            for (int i = 1; i <= a[x][y]; i++) 
            {
                if (solveMazeUtil(a, x, y + i, sol, N))
                    return true;
                if (solveMazeUtil(a, x + i, y, sol, N))
                    return true;
            }
            
            sol[x][y] = 0;
            return false;
        }
        
        return false;
    }

    public static boolean isSafe(int[][] a, int x, int y, int N) 
    {
   
        if (x >= 0 && x < N && y >= 0 && y < N && a[x][y] >= 1) return true;

        return false;
    }
}
