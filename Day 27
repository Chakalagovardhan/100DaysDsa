
class Solution {
 .
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[V];

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                iterativeDFS(i, adj, visited, stack);
            }
        }

        int[] topoOrder = new int[V];
        int index = 0;
        while (!stack.isEmpty()) {
            topoOrder[index++] = stack.pop();
        }
        
        return topoOrder;
    }


    private static void iterativeDFS(int start, ArrayList<ArrayList<Integer>> adj, boolean[] visited, Stack<Integer> resultStack) {
        Stack<Integer> stack = new Stack<>();
        stack.push(start);
        
        while (!stack.isEmpty()) {
            int node = stack.peek();
            
            if (!visited[node]) {
                visited[node] = true;
            }
            
            boolean allVisited = true;
            for (int neighbor : adj.get(node)) {
                if (!visited[neighbor]) {
                    stack.push(neighbor);
                    allVisited = false;
                }
            }
            
            if (allVisited) {
                stack.pop();
                resultStack.push(node);
            }
        }
    }
}
