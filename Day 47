class Solution {
    static String maxNum = "";  // To store the maximum number found

    // Function to find the largest number after k swaps.
    public static String findMaximumNum(String str, int k) {
        maxNum = str;  // Initialize maxNum with the original number
        findMaximumUtil(str.toCharArray(), k, 0);
        return maxNum;
    }

    private static void findMaximumUtil(char[] strArr, int k, int index) {
        if (k == 0) return;

        int n = strArr.length;

        // Track if there is any swap required for the current index
        char maxChar = strArr[index];
        for (int i = index + 1; i < n; i++) {
            if (strArr[i] > maxChar) {
                maxChar = strArr[i];
            }
        }

        // If the max character is already at the current position, no swap needed
        if (maxChar != strArr[index]) {
            for (int i = index + 1; i < n; i++) {
                if (strArr[i] == maxChar) {
                    // Swap the characters
                    swap(strArr, index, i);

                    // Update maxNum if current string is greater
                    String currStr = new String(strArr);
                    if (currStr.compareTo(maxNum) > 0) {
                        maxNum = currStr;
                    }

                    // Recursively call the function with one less swap
                    findMaximumUtil(strArr, k - 1, index + 1);

                    // Backtrack - undo the swap
                    swap(strArr, index, i);
                }
            }
        } else {
            findMaximumUtil(strArr, k, index + 1);
        }
    }

    // Helper method to swap characters in the char array
    private static void swap(char[] strArr, int i, int j) {
        char temp = strArr[i];
        strArr[i] = strArr[j];
        strArr[j] = temp;
    }
}
