class Solution {
    boolean graphColoring(int V, List<int[]> edges, int m) {
        // Handle edge case for a single vertex
        if (V == 1 && m >= 1) {
            return true; // Only one vertex, can always color it with one or more colors
        }

        // Handle the case where only one color is given and there are edges
        if (m == 1 && edges.size() > 0) {
            return false; // Not possible to color the graph
        }

        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }

        int[] color = new int[V];
        Arrays.fill(color, 0); 

        return canColorGraph(0, graph, color, m, V);
    }

    private boolean canColorGraph(int node, List<List<Integer>> graph, int[] color, int m, int V) {
        if (node == V) {
            return true;
        }

        for (int c = 1; c <= m; c++) {
            if (isSafe(node, graph, color, c)) {  
                color[node] = c; 

                if (canColorGraph(node + 1, graph, color, m, V)) {
                    return true;
                }

                color[node] = 0; 
            }
        }
        return false; 
    }
    
    private boolean isSafe(int node, List<List<Integer>> graph, int arr[], int c) {
        for (int neigh : graph.get(node)) {
            if (arr[neigh] == c) {
                return false;
            }
        }
        return true;
    }
}
