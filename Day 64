
//brutforce approach
// class Solution {

//     static Boolean isSubsetSum(int arr[], int target) {
//         return helper(arr, arr.length - 1, target);
//     }

//     private static Boolean helper(int[] arr, int index, int target) {
      
//         if (target == 0) return true; 
//         if (index < 0) return false; 

       
//         if (arr[index] > target) {
//             return helper(arr, index - 1, target);
//         }

   
//         boolean notTaken = helper(arr, index - 1, target);
//         boolean taken = helper(arr, index - 1, target - arr[index]);

//         return notTaken || taken;
//     }
// }


//Efficeint approach

class Solution{
     static Boolean isSubsetSum(int arr[], int target) {
         
         int n= arr.length;
         boolean dp[][]= new boolean[n+1][target+1];
         for(int i=0;i<=n;i++)
         {
             dp[i][0]=true;
         }
         for(int i=1;i<=n;i++)
         {
             for(int j=1;j<=target;j++)
             {
                 if(arr[i-1]>j)
                 {
                     dp[i][j]=dp[i-1][j];
                 }
                 else{
                     dp[i][j]=dp[i-1][j] || dp[i-1][j-arr[i-1]];
                 }
             }
         }
         return dp[n][target];
     }
    
}





















